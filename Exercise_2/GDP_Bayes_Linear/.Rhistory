eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
Sigma_n <- solve(K_n)
for(i in 1:B){
##Update all the parameters for full conditional of beta
Lambda <- diag(cur_lambda,n)
K_n <- t(X)%*%Lambda%*%X +K
Sigma_n <- solve(K_n)
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
cur_beta <-rmvnorm(1,mean=m_n,sigma= Sigma_n/cur_omega)
##Update all the parameters for full conditional of omega
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
cur_omega <- rgamma(1,d_n/2,eta_n/2)
##Update all the parameters for full conditional of lambda
mu <- X%*%t(cur_beta)
cur_lambda <- rgamma(n,rep((h+1)/2,n),(cur_omega*(y-mu)^2+h)/2)
par_mat[i,] <- c(cur_beta,cur_omega,cur_lambda)
}
final_idx <- seq(from=100,to=B,by=5)
Beta_2 <- par_mat[,1:2]
return(c(mean(Beta_2[final_idx,1],mean(Beta_2[final_idx,2]))))
}
replicate(1,get_beta_no_thin(X,y))
get_beta_no_thin <- function(X,y){
B <- 10000
cur_beta <- c(0,0)
cur_omega <- 1
cur_lambda <- rep(1,n)
num_par <- length(cur_beta)+length(cur_lambda) +1
par_mat <- matrix(NA,nrow=B,ncol=num_par)
##Prior Param
Lambda <- diag(cur_lambda,n)
K <- diag(0.001,2)
h <- 0.01
d <- 1
eta <- var(y)
m <- matrix(c(0,0),nrow=2)
##Posterior Param
d_n <- n + d
K_n <- t(X)%*%Lambda%*%X +K
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
Sigma_n <- solve(K_n)
for(i in 1:B){
##Update all the parameters for full conditional of beta
Lambda <- diag(cur_lambda,n)
K_n <- t(X)%*%Lambda%*%X +K
Sigma_n <- solve(K_n)
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
cur_beta <-rmvnorm(1,mean=m_n,sigma= Sigma_n/cur_omega)
##Update all the parameters for full conditional of omega
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
cur_omega <- rgamma(1,d_n/2,eta_n/2)
##Update all the parameters for full conditional of lambda
mu <- X%*%t(cur_beta)
cur_lambda <- rgamma(n,rep((h+1)/2,n),(cur_omega*(y-mu)^2+h)/2)
par_mat[i,] <- c(cur_beta,cur_omega,cur_lambda)
}
Beta_2 <- par_mat[,1:2]
return(c(mean(Beta_2[,1]),mean(Beta_2[,2])))
}
get_beta_thin <- function(X,y){
B <- 10000
cur_beta <- c(0,0)
cur_omega <- 1
cur_lambda <- rep(1,n)
num_par <- length(cur_beta)+length(cur_lambda) +1
par_mat <- matrix(NA,nrow=B,ncol=num_par)
##Prior Param
Lambda <- diag(cur_lambda,n)
K <- diag(0.001,2)
h <- 0.01
d <- 1
eta <- var(y)
m <- matrix(c(0,0),nrow=2)
##Posterior Param
d_n <- n + d
K_n <- t(X)%*%Lambda%*%X +K
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
Sigma_n <- solve(K_n)
for(i in 1:B){
##Update all the parameters for full conditional of beta
Lambda <- diag(cur_lambda,n)
K_n <- t(X)%*%Lambda%*%X +K
Sigma_n <- solve(K_n)
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
cur_beta <-rmvnorm(1,mean=m_n,sigma= Sigma_n/cur_omega)
##Update all the parameters for full conditional of omega
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
cur_omega <- rgamma(1,d_n/2,eta_n/2)
##Update all the parameters for full conditional of lambda
mu <- X%*%t(cur_beta)
cur_lambda <- rgamma(n,rep((h+1)/2,n),(cur_omega*(y-mu)^2+h)/2)
par_mat[i,] <- c(cur_beta,cur_omega,cur_lambda)
}
final_idx <- seq(from=100,to=B,by=5)
Beta_2 <- par_mat[,1:2]
return(c(mean(Beta_2[final_idx,1]),mean(Beta_2[final_idx,2])))
}
replicate(1,get_beta_no_thin(X,y))
replicate(2,get_beta_no_thin(X,y))
num_rep<- 100
no_thin <- matrix(NA,nrow=num_rep,ncol=2)
t(replicate(2,get_beta_no_thin(X,y)))
num_rep<- 100
no_thin<-t(replicate(num_rep,get_beta_no_thin(X,y)))
thin<-t(replicate(num_rep,get_beta_thin(X,y)))
ans1<- apply(no_thin,2,var)
ans2<- apply(thin,2,var)
ans1
ans2
get_beta<- function(X,y){
B <- 10000
cur_beta <- c(0,0)
cur_omega <- 1
cur_lambda <- rep(1,n)
num_par <- length(cur_beta)+length(cur_lambda) +1
par_mat <- matrix(NA,nrow=B,ncol=num_par)
##Prior Param
Lambda <- diag(cur_lambda,n)
K <- diag(0.001,2)
h <- 0.01
d <- 1
eta <- var(y)
m <- matrix(c(0,0),nrow=2)
##Posterior Param
d_n <- n + d
K_n <- t(X)%*%Lambda%*%X +K
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
Sigma_n <- solve(K_n)
for(i in 1:B){
##Update all the parameters for full conditional of beta
Lambda <- diag(cur_lambda,n)
K_n <- t(X)%*%Lambda%*%X +K
Sigma_n <- solve(K_n)
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
cur_beta <-rmvnorm(1,mean=m_n,sigma= Sigma_n/cur_omega)
##Update all the parameters for full conditional of omega
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
cur_omega <- rgamma(1,d_n/2,eta_n/2)
##Update all the parameters for full conditional of lambda
mu <- X%*%t(cur_beta)
cur_lambda <- rgamma(n,rep((h+1)/2,n),(cur_omega*(y-mu)^2+h)/2)
par_mat[i,] <- c(cur_beta,cur_omega,cur_lambda)
}
Beta_2 <- par_mat[,1:2]
return(cbind(c(mean(Beta_2[,1]),mean(Beta_2[,2])),c(mean(Beta_2[final_idx,1]),mean(Beta_2[final_idx,2]))))
}
Beta_2 <- par_mat[,1:2]
get_beta<- function(X,y){
B <- 10000
cur_beta <- c(0,0)
cur_omega <- 1
cur_lambda <- rep(1,n)
num_par <- length(cur_beta)+length(cur_lambda) +1
par_mat <- matrix(NA,nrow=B,ncol=num_par)
##Prior Param
Lambda <- diag(cur_lambda,n)
K <- diag(0.001,2)
h <- 0.01
d <- 1
eta <- var(y)
m <- matrix(c(0,0),nrow=2)
##Posterior Param
d_n <- n + d
K_n <- t(X)%*%Lambda%*%X +K
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
Sigma_n <- solve(K_n)
for(i in 1:B){
##Update all the parameters for full conditional of beta
Lambda <- diag(cur_lambda,n)
K_n <- t(X)%*%Lambda%*%X +K
Sigma_n <- solve(K_n)
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
cur_beta <-rmvnorm(1,mean=m_n,sigma= Sigma_n/cur_omega)
##Update all the parameters for full conditional of omega
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
cur_omega <- rgamma(1,d_n/2,eta_n/2)
##Update all the parameters for full conditional of lambda
mu <- X%*%t(cur_beta)
cur_lambda <- rgamma(n,rep((h+1)/2,n),(cur_omega*(y-mu)^2+h)/2)
par_mat[i,] <- c(cur_beta,cur_omega,cur_lambda)
}
Beta_2 <- par_mat[,1:2]
final_idx <- seq(from=100,to=B,by=5)
return(cbind(c(mean(Beta_2[,1]),mean(Beta_2[,2])),c(mean(Beta_2[final_idx,1]),mean(Beta_2[final_idx,2]))))
}
df <- read.csv("gdpgrowth.csv")
library(mvtnorm)
y <- df$GR6096
n <- length(y)
X <- matrix(NA,ncol=2,nrow=n)
X[,1] <- rep(1,n)
X[,2] <-df$DEF60
Lambda <- diag(1,n)
K <- diag(0.001,2)
d <- 1
eta <- var(y)
m <- matrix(c(0,0),nrow=2)
d_n <- n + d
K_n <- t(X)%*%Lambda%*%X +K
Sigma_n <- solve(K_n)
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
################
S <- 10000
omega <-rgamma(S,d_n/2,eta_n/2)
Beta_1 <- matrix(NA,ncol=2,nrow=S)
for(i in 1:S){
Beta_1[i,] <- rmvnorm(1,m_n,sigma= Sigma_n/omega[i])
}
# plot(X[,2],y=y)
# for(i in 1:S){
#   abline(a=Beta_1[i,1],b=Beta_1[i,2])
# }
############################
##Initial Values
B <- 10000
cur_beta <- c(0,0)
cur_omega <- 1
cur_lambda <- rep(1,n)
num_par <- length(cur_beta)+length(cur_lambda) +1
par_mat <- matrix(NA,nrow=B,ncol=num_par)
##Prior Param
Lambda <- diag(cur_lambda,n)
K <- diag(0.001,2)
h <- 0.01
d <- 1
eta <- var(y)
m <- matrix(c(0,0),nrow=2)
##Posterior Param
d_n <- n + d
K_n <- t(X)%*%Lambda%*%X +K
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
Sigma_n <- solve(K_n)
for(i in 1:B){
##Update all the parameters for full conditional of beta
Lambda <- diag(cur_lambda,n)
K_n <- t(X)%*%Lambda%*%X +K
Sigma_n <- solve(K_n)
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
cur_beta <-rmvnorm(1,mean=m_n,sigma= Sigma_n/cur_omega)
##Update all the parameters for full conditional of omega
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
cur_omega <- rgamma(1,d_n/2,eta_n/2)
##Update all the parameters for full conditional of lambda
mu <- X%*%t(cur_beta)
cur_lambda <- rgamma(n,rep((h+1)/2,n),(cur_omega*(y-mu)^2+h)/2)
par_mat[i,] <- c(cur_beta,cur_omega,cur_lambda)
}
Beta_2 <- par_mat[,1:2]
final_idx <- seq(from=100,to=B,by=5)
plot(X[,2],y=y,col="darkorange",pch=19,main="Regression plot",xlab="X")
# plot(par_mat[final_idx,1])
abline(a=mean(Beta_2[final_idx,1]),b=mean(Beta_2[final_idx,2]),col="salmon",lwd=3)
abline(a=mean(Beta_1[final_idx,1]),b=mean(Beta_1[final_idx,2]),col="cyan4",lwd=3)
legend(0.12,-0.01, legend=c("Same Lambda","Different Lambda"),
col=c("cyan4","salmon"), lty=1, cex=0.8)
get_beta<- function(X,y){
B <- 10000
cur_beta <- c(0,0)
cur_omega <- 1
cur_lambda <- rep(1,n)
num_par <- length(cur_beta)+length(cur_lambda) +1
par_mat <- matrix(NA,nrow=B,ncol=num_par)
##Prior Param
Lambda <- diag(cur_lambda,n)
K <- diag(0.001,2)
h <- 0.01
d <- 1
eta <- var(y)
m <- matrix(c(0,0),nrow=2)
##Posterior Param
d_n <- n + d
K_n <- t(X)%*%Lambda%*%X +K
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
Sigma_n <- solve(K_n)
for(i in 1:B){
##Update all the parameters for full conditional of beta
Lambda <- diag(cur_lambda,n)
K_n <- t(X)%*%Lambda%*%X +K
Sigma_n <- solve(K_n)
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
cur_beta <-rmvnorm(1,mean=m_n,sigma= Sigma_n/cur_omega)
##Update all the parameters for full conditional of omega
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
cur_omega <- rgamma(1,d_n/2,eta_n/2)
##Update all the parameters for full conditional of lambda
mu <- X%*%t(cur_beta)
cur_lambda <- rgamma(n,rep((h+1)/2,n),(cur_omega*(y-mu)^2+h)/2)
par_mat[i,] <- c(cur_beta,cur_omega,cur_lambda)
}
Beta_2 <- par_mat[,1:2]
final_idx <- seq(from=100,to=B,by=5)
return(cbind(c(mean(Beta_2[,1]),mean(Beta_2[,2])),c(mean(Beta_2[final_idx,1]),mean(Beta_2[final_idx,2]))))
}
num_rep<- 100
get_beta(X,y)
replicate(2,get_beta(X,y))
a<- replicate(2,get_beta(X,y))
class(a)
a[,1]
a[1]
a[1,1]
a[1][1]
a[1][2]
a
a[2]
a[2][2,1]
a[2][1]
a[2][2]
a[1][2]
get_beta<- function(X,y){
B <- 10000
cur_beta <- c(0,0)
cur_omega <- 1
cur_lambda <- rep(1,n)
num_par <- length(cur_beta)+length(cur_lambda) +1
par_mat <- matrix(NA,nrow=B,ncol=num_par)
##Prior Param
Lambda <- diag(cur_lambda,n)
K <- diag(0.001,2)
h <- 0.01
d <- 1
eta <- var(y)
m <- matrix(c(0,0),nrow=2)
##Posterior Param
d_n <- n + d
K_n <- t(X)%*%Lambda%*%X +K
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
Sigma_n <- solve(K_n)
for(i in 1:B){
##Update all the parameters for full conditional of beta
Lambda <- diag(cur_lambda,n)
K_n <- t(X)%*%Lambda%*%X +K
Sigma_n <- solve(K_n)
m_n <- Sigma_n%*%(t(X)%*%Lambda%*%y + K%*%m)
cur_beta <-rmvnorm(1,mean=m_n,sigma= Sigma_n/cur_omega)
##Update all the parameters for full conditional of omega
eta_n <- t(y)%*%Lambda%*%y+ t(m)%*%K%*%m - t(m_n)%*%K_n%*%m_n + eta
cur_omega <- rgamma(1,d_n/2,eta_n/2)
##Update all the parameters for full conditional of lambda
mu <- X%*%t(cur_beta)
cur_lambda <- rgamma(n,rep((h+1)/2,n),(cur_omega*(y-mu)^2+h)/2)
par_mat[i,] <- c(cur_beta,cur_omega,cur_lambda)
}
Beta_2 <- par_mat[,1:2]
final_idx <- seq(from=100,to=B,by=5)
return(c(mean(Beta_2[,1]),mean(Beta_2[,2]),mean(Beta_2[final_idx,1]),mean(Beta_2[final_idx,2])))
}
num_rep<- 100
a<- replicate(2,get_beta(X,y))
a
num_rep<- 1000
ans <- replicate(num_rep,get_beta(X,y))
ans
apply(ans,1,var)
ans[1,]
apply(ans,1,var)
compute_kernel <- function(d,h){
##Input: d- distance (scalar), h-bandwith (scalar)
##Output: kernel value (scalar)
return(1/h*dnorm(d/h,mean=0,sd=1))
}
get_weight <- function(x_vec,new_x,ker_func,h){
##Input: x_vec- observation (vector), new_x - new x value (scalar), ker_func - function to compute kernel(function), h-bandwidth(scalar)
##Output: return weights (vector)
dist_x <- x_vec-new_x
return(ker_func(dist_x,h))
}
##Generate observations x and y
##Add white noise to the true function
n <- 100
x <- runif(n,-2,2)
y <- x^3 + rnorm(n,0,1)
h_vec <- c(0.01,0.1,0.2,1,2)
B <- n/2
x_star <- runif(B,-2,2)
get_y_pred<- function(x,x_star,y,h){
##Input: x- observations (vector), x_star - new observations (vector), y-observations (vector), h - bandwidth (scalar)
##Output: y_pred - predictions of y valued (vector)
W <- matrix(NA,nrow=length(x),ncol=length(x_star))
for(i in 1:length(x_star)){
W[,i]<-get_weight(x,x_star[i],compute_kernel,h)
}
normalize <- function(x){
return(x/sum(x))
}
W_n <- apply(W,2,normalize)
y_pred <- rep(NA,length(x_star))
for(i in 1:length(x_star)){
y_pred[i] <-sum(W_n[,i]*y)
}
return(y_pred)
}
##Create a matrix to store predictions for each value of h
Y_P <- matrix(NA,nrow=B,ncol=length(h_vec))
for(j in 1:length(h_vec)){
Y_P[,j]<-get_y_pred(x,x_star,y,h_vec[j])
}
plot(x,y,main="Kernel estimators for different values of h", col="darkorange", pch=19)
col_vec <- 1:length(h_vec)+1
for(k in 1:length(h_vec)){
x_idx <- order(x_star)
lines(x_star[x_idx],Y_P[,k][x_idx],col=col_vec[k],lwd=2)
}
legend(1.2,-3, legend=paste("h=",h_vec),
col=col_vec, lty=1, cex=0.8)
df <- cbind(x,y)
train_idx <- sample(1:n,0.8*n)
train <-  df[train_idx,]
test <- df[-train_idx,]
h <- 0.01
get_y_pred<- function(x_train,x_star,y_train,h){
##Input: take vectors x and y from training data and (x_star) from testing data
##Return: Predicted values of new y
W <- matrix(NA,nrow=length(x_train),ncol=length(x_star))
for(i in 1:length(x_star)){
W[,i]<-get_weight(x_train,x_star[i],compute_kernel,h)
}
normalize <- function(x){
return(x/sum(x))
}
W_n <- apply(W,2,normalize)
y_pred <- rep(NA,length(x_star))
for(i in 1:length(x_star)){
y_pred[i] <-sum(W_n[,i]*y_train)
}
return(y_pred)
}
get_sse <- function(y_pred,y_star){
##Input - y_pred- predicted values of y (vector), y_star - new values of y (vector)
##Output: sum of square error
return(sum((y_star-y_pred)^2))
}
get_err <- function(y_star,y_pred){
return(y_star-y_pred)
}
get_pred_err <- function(x_train,x_star,y_train,y_star,h){
##Input: take vectors x and y from training data and (x_star) from testing data
##Return: Predicted values of new y and errors in a matrix where the first column is the   error and the second column is the predicted value
y_pred <-get_y_pred(x_train,x_star,y_train,h)
sse <- get_sse(y_pred,y_star)
err_pred <- cbind(y_star-y_pred,y_pred)
return(err_pred)
}
n <- 500
train_idx <- sample(1:n,size=0.7*n)
test_idx <- seq(1:n)[-train_idx]
x <- runif(n,0,1)
not_noisy <- rnorm(n,0,0.3)
noisy <- rnorm(n,0,0.8)
y_wig_noi <- sin(20*x)+noisy
y_wig_n_noi <- sin(20*x)+not_noisy
y_smooth_noi <- 20*(x-0.5)^3+0.5 + noisy
y_smooth_n_noi <- 20*(x-0.5)^3+0.5 + not_noisy
par(mfrow=c(2,2))
plot(x,y_wig_noi,col="darkorange")
plot(x,y_wig_n_noi,col="darkorange")
plot(x,y_smooth_noi,col="darkorange")
plot(x,y_smooth_n_noi,col="darkorange")
h_vec <- seq(0.01,0.1,0.001)
x_train <- x[train_idx]
x_test <- x[test_idx]
y_pred_w_noi <- get_y_pred(x_train,x_test,y_wig_noi[train_idx],0.01)
y_pred_w_n_noi <- get_y_pred(x_train,x_test,y_wig_n_noi[train_idx],0.01)
y_pred_s_noi <- get_y_pred(x_train,x_test,y_smooth_noi[train_idx],0.01)
y_pred_s_n_noi <- get_y_pred(x_train,x_test,y_smooth_n_noi[train_idx],0.01)
get_test_err <- function(x_train,x_test,y_train,y_test, h_vec){
err_vec <- rep(NA,length(h_vec))
for(i in 1:length(h_vec)){
y_pred <- get_y_pred(x_train,x_test,y_train,h_vec[i])
err_vec[i] <- get_sse(y_pred,y_test)
}
return(err_vec)
}
t_err_w_noi <-get_test_err(x_train,x_test,y_wig_noi[train_idx],y_wig_noi[test_idx],h_vec)
t_err_w_n_noi <-get_test_err(x_train,x_test,y_wig_n_noi[train_idx],y_wig_n_noi[test_idx],h_vec)
t_err_s_noi <-get_test_err(x_train,x_test,y_smooth_noi[train_idx],y_smooth_noi[test_idx],h_vec)
t_err_s_n_noi<-get_test_err(x_train,x_test,y_smooth_n_noi[train_idx],y_smooth_n_noi[test_idx],h_vec)
best_h_w_noi <- which.min(t_err_w_noi)
best_h_w_n_noi <- which.min(t_err_w_n_noi)
best_h_s_noi <- which.min(t_err_s_noi)
best_h_s_n_noi <- which.min(t_err_s_n_noi)
y_pred_w_noi <- get_y_pred(x_train,x_test,y_wig_noi[train_idx],h_vec[best_h_w_noi])
y_pred_w_n_noi <- get_y_pred(x_train,x_test,y_wig_n_noi[train_idx],h_vec[best_h_w_n_noi])
y_pred_s_noi <- get_y_pred(x_train,x_test,y_smooth_noi[train_idx],h_vec[best_h_s_noi])
y_pred_s_n_noi <- get_y_pred(x_train,x_test,y_smooth_n_noi[train_idx],h_vec[best_h_s_n_noi])
x_idx <- order(x_test)
par(mfrow=c(2,2))
plot(x,y_wig_noi,col="darkorange",pch=19)
lines(x_test[x_idx],y_pred_w_noi[x_idx],col="cyan4",lwd=3)
legend(0.6,-1.5, legend=paste("h=",h_vec[best_h_w_noi]),
col="cyan4", lty=1, cex=0.8)
plot(x,y_wig_n_noi,col="darkorange",pch=19)
lines(x_test[x_idx],y_pred_w_n_noi[x_idx],col="cyan4",lwd=3)
legend(0.6,-1, legend=paste("h=",h_vec[best_h_w_n_noi]),
col="cyan4", lty=1, cex=0.8)
plot(x,y_smooth_noi,col="darkorange",pch=19)
lines(x_test[x_idx],y_pred_s_noi[x_idx],col="cyan4",lwd=3)
legend(0.6,-1, legend=paste("h=",h_vec[best_h_s_noi]),
col="cyan4", lty=1, cex=0.8)
plot(x,y_smooth_n_noi,col="darkorange",pch=19)
lines(x_test[x_idx],y_pred_s_n_noi[x_idx],col="cyan4",lwd=3)
legend(0.6,-1, legend=paste("h=",h_vec[best_h_s_n_noi]),
col="cyan4", lty=1, cex=0.8)
